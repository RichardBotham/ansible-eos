#!/usr/bin/python
#
# Copyright (c) 2014, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
#   Neither the name of Arista Networks nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
DOCUMENTATION = """
module: eos_interface
short_description: Generic module to manage interfaces in EOS
description:
  - Provides state management for any interface in EOS.  The interface
    attributes supported in this module are available on any interface
    available on the EOS node
author: Arista EOS+
notes:
requirements:
  - Arista EOS 4.12.0 or later
  - EOS command API enabled
  - pyeapy 0.1.0 or later
options:
  name:
    description:
      - The unique interface identifier name.  The interface name must use
        the full interface name (no abbreviated names).  For example,
        interfaces should be specified as Ethernet1 not Et1
    required: true
  enable:
    description:
      - Configures the administrative state for the interface.
    required: true
    choices: BOOLEANS
  description:
    description:
      - Sets a one line ASCII description for the interface.
    required: false
  state:
    description:
      - Identifies the state of the interface.  Interfaces can be either
        configured, unconfigured or default.   Please beware that an interface with
        state of default will also wipe out any additional services
        on top of the physical interface.
    required: false
    default: configured
    choices: ['present', 'absent']
"""
import syslog

from ansible.module_utils.basic import *

import pyeapi


class EosAnsibleModule(AnsibleModule):

    common_args = {
        'config': dict(),
        'username': dict(),
        'password': dict(),
        'connection': dict(default='localhost'),
        'state': dict(default='present', choices=['present', 'absent'])
    }

    def __init__(self, *args, **kwargs):

        kwargs['argument_spec'].update(self.common_args)
        super(EosAnsibleModule, self).__init__(*args, **kwargs)

        self._attributes = self.map_argument_spec()
        self.validate()

        self._node = self.connect()

        self._instance = None
        self.desired_state = self._attributes['state']

        self.supports_create = True
        self.supports_remove = True
        self.supports_state = True

        self.debug = False

        self.result = dict(changed=False, changes=dict())

    def map_argument_spec(self):
        attrs = dict()
        attrs = dict([(key, self.params[key]) for key in self.params])
        return attrs

    def set_supports_create(self, value):
        self.supports_create = value

    def set_supports_remove(self, value):
        self.supports_remove = value

    def set_supports_state(self, value):
        self.supports_state = value
        if not value:
            self.supports_create = False
            self.supports_remove = False

    @property
    def instance(self):
        if self._instance:
            return self._instance

        func = self.func('instance')
        if not func:
            self.fail_json(msg='Module does not support "instance"')

        self._instance = func(self)

        return self._instance

    @property
    def attributes(self):
        return self._attributes

    @property
    def node(self):
        if self._node:
            return self._node
        self._node = self.connect()
        return self._node

    def create(self):
        if not self.check_mode:
            func = self.func('create')
            if not func and self.supports_create:
                self.fail_json(msg='Module must define "create"')
            return func(self)

    def remove(self):
        if not self.check_mode:
            func = self.func('remove')
            if not func and self.supports_remove:
                self.fail_json(msg='Module must define "remove"')
            return func(self)

    def flush(self):
        if self.desired_state == 'present' or not self.supports_state:
            if self.instance.get('state') == 'absent':
                self.create()
                self.refresh()
                self.result['changed'] = True

            changeset = self.attributes.viewitems() - self.instance.viewitems()

            if self.debug:
                self.result['desired_state'] = self.attributes
                self.result['current_state'] = self.instance

            changes = self.update(changeset)
            if changes:
                self.result['changes'] = changes
                self.result['changed'] = True

        elif self.desired_state == 'absent' and self.supports_state:
            if selfinstance.get('state') == 'present':
                self.remove()
                self.result['changed'] = True

        self.refresh()

    def update(self, changeset):
        changes = dict()
        for key, value in changeset:
            func_name = 'set_%s' % key
            func = self.func(func_name)
            if func and value is not None:
                changes[key] = value
                if not self.check_mode:
                    func(self)
        return changes

    def validate(self):
        for key, value in self._attributes.items():
            func = self.func('validate_%s' % key)
            if func and value is not None:
                try:
                    func(value)
                except AttributeError as exc:
                    self.fail_json(msg=exc.message)

    def connect(self):
        if self.params['config']:
            pyeapi.load_config(self.params['config'])

        config = pyeapi.config_for(self.params['connection'])
        if not config:
            msg = 'Connection name "%s" not found' % self.params['connection']
            self.fail_json(msg=msg)

        if self.params['username']:
            config['username'] = self.params['username']

        if self.params['password']:
            config['password'] = self.params['password']

        connection = pyeapi.client.make_connection(**config)
        node = pyeapi.client.Node(connection)

        return node

    def func(self, name):
        return globals().get(name)

    def refresh(self):
        self._instance = None

def log(entry):
    """ Writes an entry to the local syslog

    Args:
        entry (str): The text string to write to syslog

    """
    syslog.openlog('ansible-eos')
    syslog.syslog(syslog.LOG_NOTICE, str(entry))

def instance(module):
    """ Returns the interface properties for the specified name
    """
    name = module.attributes['name']
    result = module.node.api('interfaces').get(name)
    instance = dict(name=name)
    instance['enable'] = not result['shutdown']
    instance['description'] = result['description']
    instance['sflow'] = result['sflow']
    instance['flowcontrol_send'] = result['flowcontrol_send'] == 'on'
    instance['flowcontrol_receive'] = result['flowcontrol_receive'] == 'on'
    return instance

def set_description(module):
    """ Configures the description attribute for the interface
    """
    value = module.attributes['description']
    name = module.attributes['name']
    module.node.api('interfaces').set_description(name, value)

def set_enable(module):
    """ Configures the enable attribute for the interface
    """
    value = not module.attributes['enable']
    name = module.attributes['name']
    module.node.api('interfaces').set_shutdown(name, value)

def set_sflow(module):
    """ Configures the sflow attribute for the interface
    """
    value = module.attributes['sflow']
    name = module.attributes['name']
    module.node.api('interfaces').set_sflow(name, value)

def set_flowcontrol_send(module):
    """ Configures the flowcontrol send  attribute for the interface
    """
    value = module.attributes['flowcontrol_send']
    value = 'on' if value else 'off'
    name = module.attributes['name']
    module.node.api('interfaces').set_flowcontrol_send(name, value)

def set_flowcontrol_receive(module):
    """ Configures the flowcontrol receive attribute for the interface
    """
    value = module.attributes['flowcontrol_receive']
    value = 'on' if value else 'off'
    name = module.attributes['name']
    module.node.api('interfaces').set_flowcontrol_receive(name, value)


def main():
    """ The main module routine called when the module is run by Ansible
    """

    argument_spec = dict(
        name=dict(required=True),
        enable=dict(type='bool', default=True),
        description=dict(),
        sflow=dict(type='bool', default=True),
        flowcontrol_send=dict(type='bool'),
        flowcontrol_receive=dict(type='bool')
    )

    module = EosAnsibleModule(argument_spec=argument_spec,
                              supports_check_mode=True)

    module.set_supports_state(False)

    module.flush()

    result = module.result
    result['instance'] = module.instance

    module.exit_json(**result)

main()
